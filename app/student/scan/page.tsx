"use client"

/*
 * Student QR Scanner Page
 * This page provides the complete QR scanning interface for students
 * to mark attendance by scanning QR codes generated by instructors.
 * 
 * Features:
 * - Real QR code scanning using html5-qrcode
 * - Subject selection and validation
 * - Camera permission handling
 * - Image upload fallback
 * - Real-time attendance marking
 * - Integration with Supabase database
 */

import { useState, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Badge } from "@/components/ui/badge"
import { ArrowLeft, User, BookOpen, Clock, CheckCircle, AlertCircle } from "lucide-react"
import { QRScanner } from "@/components/qr-scanner"
import { useRouter } from "next/navigation"
import { createClient } from "@/lib/supabase/client"
import { toast } from "sonner"

interface Student {
  id: string
  name: string
  email: string
  academicLevel: string
  subjects: string[]
}

interface AttendanceResult {
  success: boolean
  message: string
}

export default function StudentScanPage() {
  const router = useRouter()
  const [student, setStudent] = useState<Student | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [attendanceHistory, setAttendanceHistory] = useState<any[]>([])

  useEffect(() => {
    // Only run on client side
    if (typeof window === 'undefined') {
      return
    }
    
    loadStudentData()
  }, [])

  const loadStudentData = async () => {
    try {
      // Ensure we're on the client side
      if (typeof window === 'undefined') {
        return
      }
      
      // Load student data from localStorage or Supabase
      const localStudent = localStorage.getItem('currentStudent')
      
      if (localStudent) {
        const studentData = JSON.parse(localStudent)
        setStudent(studentData)
        console.log("[Student Scan] Loaded student data:", studentData.name)
        
        // Load attendance history
        await loadAttendanceHistory(studentData.id)
      } else {
        // Create demo student if none exists
        const demoStudent: Student = {
          id: 'student_demo_' + Date.now(),
          name: 'Demo Student',
          email: 'student@demo.com',
          academicLevel: 'Second Year',
          subjects: [
            "Western Rules & Solfege 3",
            "Hymn Singing",
            "Rhythmic Movement 2"
          ]
        }
        setStudent(demoStudent)
        localStorage.setItem('currentStudent', JSON.stringify(demoStudent))
        console.log("[Student Scan] Created demo student")
        
        // Load attendance history
        await loadAttendanceHistory(demoStudent.id)
      }
    } catch (error) {
      console.error("[Student Scan] Error loading student data:", error)
      toast.error("Failed to load student data")
      
      // Create demo student as fallback
      const demoStudent: Student = {
        id: 'student_demo_' + Date.now(),
        name: 'Demo Student',
        email: 'student@demo.com',
        academicLevel: 'Second Year',
        subjects: [
          "Western Rules & Solfege 3",
          "Hymn Singing",
          "Rhythmic Movement 2"
        ]
      }
      setStudent(demoStudent)
      localStorage.setItem('currentStudent', JSON.stringify(demoStudent))
    } finally {
      setIsLoading(false)
    }
  }

  const loadAttendanceHistory = async (studentId: string) => {
    try {
      // Ensure we're on the client side
      if (typeof window === 'undefined') {
        return
      }
      
      // Try to load from Supabase first
      const supabase = createClient()
      
      if (supabase) {
        const { data, error } = await supabase
          .from('attendance_records')
          .select(`
            *,
            attendance_sessions (
              subject_name,
              academic_level,
              session_date,
              session_time
            )
          `)
          .eq('student_id', studentId)
          .order('created_at', { ascending: false })
          .limit(5)

        if (!error && data) {
          setAttendanceHistory(data)
          console.log("[Student Scan] Loaded attendance history from Supabase")
          return
        }
      }
      
      // Fallback to localStorage
      const localHistory = localStorage.getItem(`attendance_history_${studentId}`)
      if (localHistory) {
        setAttendanceHistory(JSON.parse(localHistory))
        console.log("[Student Scan] Loaded attendance history from localStorage")
      }
    } catch (error) {
      console.warn("[Student Scan] Could not load attendance history:", error)
    }
  }

  const handleSuccessfulScan = async (qrData: string): Promise<AttendanceResult> => {
    // Ensure we're on the client side
    if (typeof window === 'undefined') {
      return {
        success: false,
        message: "Client-side operation required"
      }
    }
    
    if (!student) {
      return {
        success: false,
        message: "Student data not found. Please log in again."
      }
    }

    try {
      console.log("[Student Scan] Processing QR scan for:", student.name)
      
      // Parse QR data
      let qrSessionData
      try {
        qrSessionData = JSON.parse(qrData)
      } catch (parseError) {
        return {
          success: false,
          message: "Invalid QR code format. Please scan a valid attendance QR code."
        }
      }

      // Validate QR data structure
      if (!qrSessionData.sessionId || !qrSessionData.token || !qrSessionData.subject) {
        return {
          success: false,
          message: "QR code is missing required data. Please scan a valid attendance QR code."
        }
      }

      // Check expiration
      if (Date.now() > qrSessionData.expiresAt) {
        return {
          success: false,
          message: "QR code has expired. Please ask your instructor to generate a new one."
        }
      }

      // Verify student is enrolled in the subject
      if (!student.subjects.includes(qrSessionData.subject)) {
        return {
          success: false,
          message: `You are not enrolled in ${qrSessionData.subject}. Please contact your instructor.`
        }
      }

      // Create attendance record
      const attendanceRecord = {
        session_id: qrSessionData.sessionId,
        student_id: student.id,
        check_in_time: new Date().toISOString(),
        method: 'qr_scan',
        status: 'present',
        grade_points: 10.0,
        device_info: navigator.userAgent,
        location: 'Web App'
      }

      // Try to save to Supabase
      try {
        const supabase = createClient()
        
        if (supabase) {
          // Check if already attended
          const { data: existingRecord } = await supabase
            .from('attendance_records')
            .select('id')
            .eq('session_id', qrSessionData.sessionId)
            .eq('student_id', student.id)
            .single()

          if (existingRecord) {
            return {
              success: false,
              message: "You have already marked attendance for this session."
            }
          }

          // Insert attendance record
          const { data, error } = await supabase
            .from('attendance_records')
            .insert([attendanceRecord])
            .select()
            .single()

          if (error) throw error

          console.log("[Student Scan] Attendance saved to Supabase:", data.id)
          
          // Update local history
          await loadAttendanceHistory(student.id)
          
          return {
            success: true,
            message: `Attendance marked successfully for ${qrSessionData.subject}! You earned 10 points.`
          }
        }
      } catch (supabaseError) {
        console.warn("[Student Scan] Supabase save failed, using localStorage:", supabaseError)
      }

      // Fallback to localStorage
      const localKey = `attendance_${student.id}_${qrSessionData.sessionId}`
      const existingLocal = localStorage.getItem(localKey)
      
      if (existingLocal) {
        return {
          success: false,
          message: "You have already marked attendance for this session."
        }
      }

      // Save to localStorage
      localStorage.setItem(localKey, JSON.stringify(attendanceRecord))
      
      // Update local history
      const historyKey = `attendance_history_${student.id}`
      const currentHistory = JSON.parse(localStorage.getItem(historyKey) || '[]')
      currentHistory.unshift({
        ...attendanceRecord,
        attendance_sessions: {
          subject_name: qrSessionData.subject,
          academic_level: qrSessionData.academicLevel,
          session_date: new Date().toISOString().split('T')[0],
          session_time: new Date().toTimeString().split(' ')[0]
        }
      })
      localStorage.setItem(historyKey, JSON.stringify(currentHistory.slice(0, 20))) // Keep last 20 records
      
      setAttendanceHistory(currentHistory.slice(0, 5))
      
      console.log("[Student Scan] Attendance saved to localStorage")
      
      return {
        success: true,
        message: `Attendance marked successfully for ${qrSessionData.subject}! You earned 10 points. (Demo Mode)`
      }

    } catch (error: any) {
      console.error("[Student Scan] Error processing attendance:", error)
      return {
        success: false,
        message: "Failed to mark attendance. Please try again."
      }
    }
  }

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center space-y-4">
          <div className="w-8 h-8 border-4 border-primary border-t-transparent rounded-full animate-spin mx-auto" />
          <p className="text-muted-foreground">Loading student data...</p>
        </div>
      </div>
    )
  }

  if (!student) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <Card className="w-full max-w-md">
          <CardHeader className="text-center">
            <AlertCircle className="w-12 h-12 text-destructive mx-auto mb-4" />
            <CardTitle>Student Not Found</CardTitle>
            <CardDescription>
              Please log in to access the QR scanner
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Button onClick={() => router.push('/')} className="w-full">
              Go to Login
            </Button>
          </CardContent>
        </Card>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800">
      <div className="container mx-auto px-4 py-6">
        {/* Header */}
        <div className="flex items-center justify-between mb-6">
          <Button
            variant="ghost"
            onClick={() => router.back()}
            className="flex items-center space-x-2"
          >
            <ArrowLeft className="w-4 h-4" />
            <span>Back</span>
          </Button>
          
          <div className="text-center">
            <h1 className="text-2xl font-bold text-foreground">QR Code Scanner</h1>
            <p className="text-muted-foreground">Mark your attendance</p>
          </div>
          
          <div className="w-20" /> {/* Spacer for center alignment */}
        </div>

        {/* Student Info */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="flex items-center space-x-2">
              <User className="w-5 h-5" />
              <span>Student Information</span>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <p className="text-sm text-muted-foreground">Name</p>
                <p className="font-medium">{student.name}</p>
              </div>
              <div>
                <p className="text-sm text-muted-foreground">Academic Level</p>
                <Badge variant="secondary">{student.academicLevel}</Badge>
              </div>
              <div>
                <p className="text-sm text-muted-foreground">Enrolled Subjects</p>
                <p className="text-sm">{student.subjects.length} subjects</p>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* QR Scanner Component */}
        <div className="mb-6">
          <QRScanner
            student={student}
            onSuccessfulScan={handleSuccessfulScan}
          />
        </div>

        {/* Recent Attendance */}
        {attendanceHistory.length > 0 && (
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center space-x-2">
                <Clock className="w-5 h-5" />
                <span>Recent Attendance</span>
              </CardTitle>
              <CardDescription>
                Your last 5 attendance records
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {attendanceHistory.map((record, index) => (
                  <div key={index} className="flex items-center justify-between p-3 border rounded-lg">
                    <div>
                      <p className="font-medium">
                        {record.attendance_sessions?.subject_name || 'Unknown Subject'}
                      </p>
                      <p className="text-sm text-muted-foreground">
                        {record.attendance_sessions?.session_date} at {record.attendance_sessions?.session_time}
                      </p>
                    </div>
                    <div className="text-right">
                      <Badge className="bg-green-500/10 text-green-500 border-green-500/20">
                        <CheckCircle className="w-3 h-3 mr-1" />
                        Present
                      </Badge>
                      <p className="text-sm text-muted-foreground mt-1">
                        +{record.grade_points || 10} pts
                      </p>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </div>
  )
}